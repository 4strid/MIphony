// Generated by CoffeeScript 1.3.1
(function() {
  var ParticleSystem, random,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  random = Math.random;

  ParticleSystem = (function() {

    ParticleSystem.name = 'ParticleSystem';

    ParticleSystem.prototype.count = 100;

    ParticleSystem.prototype.size = 0.02;

    ParticleSystem.prototype.life = 20;

    function ParticleSystem(scene) {
      this.scene = scene;
      this.update = __bind(this.update, this);

      this.particleSystems = [];
    }

    ParticleSystem.prototype.createParticles = function(_arg) {
      var color, i, material, particle, particles, position, system, _i, _ref;
      position = _arg.position, color = _arg.color;
      particles = new THREE.Geometry();
      material = new THREE.ParticleBasicMaterial({
        color: color,
        size: this.size
      });
      for (i = _i = 0, _ref = this.count; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        particle = position.clone();
        particle.velocity = new THREE.Vector3((random() - 0.5) * 0.5, random(), (random() - 0.5) * 0.5).multiplyScalar(0.03);
        particles.vertices.push(particle);
      }
      system = new THREE.ParticleSystem(particles, material);
      system.age = 0;
      this.particleSystems.push(system);
      return this.scene.add(system);
    };

    ParticleSystem.prototype.update = function() {
      var i, particle, system, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      _ref = this.particleSystems;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        system = _ref[i];
        if (++system.age > this.life) {
          this.scene.remove(system);
        } else {
          _ref1 = system.geometry.vertices;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            particle = _ref1[_j];
            particle.addSelf(particle.velocity);
            system.geometry.verticesNeedUpdate = true;
          }
        }
      }
      return this.particleSystems = this.particleSystems.filter(function(s) {
        return s.age <= _this.life;
      });
    };

    return ParticleSystem;

  })();

  this.ParticleSystem = ParticleSystem;

}).call(this);

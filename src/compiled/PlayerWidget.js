// Generated by CoffeeScript 1.3.1
(function() {
  var PlayerWidget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlayerWidget = (function() {

    PlayerWidget.name = 'PlayerWidget';

    function PlayerWidget(container) {
      this.onchangetrack = __bind(this.onchangetrack, this);

      this.onnext = __bind(this.onnext, this);

      this.onprev = __bind(this.onprev, this);

      this.onstop = __bind(this.onstop, this);

      this.onresume = __bind(this.onresume, this);

      this.onpause = __bind(this.onpause, this);

      this.onplay = __bind(this.onplay, this);

      this.oninit = __bind(this.oninit, this);

      var _this = this;
      this.container = $(container);
      this.controlsContainer = $('.player-controls', this.container);
      this.playlistContainer = $('.player-playlist-container', this.container);
      this.playlist = $('.player-playlist', this.container);
      this.playlistContainer.height(this.container.innerHeight() - this.controlsContainer.outerHeight()).nanoScroller();
      this.prevBtn = $('.player-prev', this.container);
      this.nextBtn = $('.player-next', this.container);
      this.playBtn = $('.player-play', this.container);
      this.stopBtn = $('.player-stop', this.container);
      this.pauseBtn = $('.player-pause', this.container);
      this.prevBtn.click(function() {
        return _this.prev();
      });
      this.nextBtn.click(function() {
        return _this.next();
      });
      this.stopBtn.click(function() {
        return _this.stop();
      });
      this.pauseBtn.click(function() {
        return _this.pause();
      });
      this.playBtn.click(function() {
        if (_this.current === 'paused') {
          return _this.resume();
        } else {
          return _this.play();
        }
      });
      this.playlist.click(function(event) {
        var target;
        target = $(event.target);
        if (target.is('li')) {
          return _this.changeTrack(target.text());
        }
      });
      this.container.on('mousewheel', function(event) {
        return event.stopPropagation();
      });
    }

    PlayerWidget.prototype.oninit = function() {
      return this.container.animate({
        left: '0px'
      }, {
        duration: 1000,
        easing: 'easeInOutCubic'
      });
    };

    PlayerWidget.prototype.setPlaylist = function(playlist) {
      var trackName, _i, _len;
      this.playlist.html('');
      for (_i = 0, _len = playlist.length; _i < _len; _i++) {
        trackName = playlist[_i];
        this.playlist.append($('<li>').text(trackName));
      }
      return this.playlistContainer.nanoScroller();
    };

    PlayerWidget.prototype.bind = function(eventName, callback) {
      return this["" + eventName + "Callback"] = callback;
    };

    PlayerWidget.prototype.onplay = function() {
      this.playBtn.hide();
      this.pauseBtn.show();
      return typeof this.playCallback === "function" ? this.playCallback() : void 0;
    };

    PlayerWidget.prototype.onpause = function() {
      this.pauseBtn.hide();
      this.playBtn.show();
      return typeof this.pauseCallback === "function" ? this.pauseCallback() : void 0;
    };

    PlayerWidget.prototype.onresume = function() {
      this.playBtn.hide();
      this.pauseBtn.show();
      return typeof this.resumeCallback === "function" ? this.resumeCallback() : void 0;
    };

    PlayerWidget.prototype.onstop = function() {
      this.pauseBtn.hide();
      this.playBtn.show();
      return typeof this.stopCallback === "function" ? this.stopCallback() : void 0;
    };

    PlayerWidget.prototype.onprev = function() {
      return typeof this.prevCallback === "function" ? this.prevCallback() : void 0;
    };

    PlayerWidget.prototype.onnext = function() {
      return typeof this.nextCallback === "function" ? this.nextCallback() : void 0;
    };

    PlayerWidget.prototype.onchangetrack = function(trackName) {
      return typeof this.changetrackCallback === "function" ? this.changetrackCallback(trackName) : void 0;
    };

    PlayerWidget.prototype.changeTrack = PlayerWidget.prototype.onchangetrack;

    return PlayerWidget;

  })();

  StateMachine.create({
    target: PlayerWidget.prototype,
    events: [
      {
        name: 'init',
        from: 'none',
        to: 'ready'
      }, {
        name: 'play',
        from: 'ready',
        to: 'playing'
      }, {
        name: 'pause',
        from: 'playing',
        to: 'paused'
      }, {
        name: 'resume',
        from: 'paused',
        to: 'playing'
      }, {
        name: 'stop',
        from: '*',
        to: 'ready'
      }
    ]
  });

  this.PlayerWidget = PlayerWidget;

}).call(this);

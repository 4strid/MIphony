// Generated by CoffeeScript 1.3.1
(function() {
  var PlayerWidget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlayerWidget = (function() {

    PlayerWidget.name = 'PlayerWidget';

    function PlayerWidget(container) {
      this.displayProgress = __bind(this.displayProgress, this);

      this.getRandomTrack = __bind(this.getRandomTrack, this);

      this.onsettrack = __bind(this.onsettrack, this);

      this.onnext = __bind(this.onnext, this);

      this.onprev = __bind(this.onprev, this);

      this.onstop = __bind(this.onstop, this);

      this.onresume = __bind(this.onresume, this);

      this.onpause = __bind(this.onpause, this);

      this.onplay = __bind(this.onplay, this);

      this.show = __bind(this.show, this);

      this.onresize = __bind(this.onresize, this);

      var _this = this;
      this.$container = $(container);
      this.$controlsContainer = $('.player-controls', this.$container);
      this.$playlistContainer = $('.player-playlist-container', this.$container);
      this.$progressContainer = $('.player-progress-container', this.$container);
      this.$progressBar = $('.player-progress-bar', this.$container);
      this.$progressText = $('.player-progress-text', this.$container);
      this.$playlist = $('.player-playlist', this.$container);
      this.$prevBtn = $('.player-prev', this.$container);
      this.$nextBtn = $('.player-next', this.$container);
      this.$playBtn = $('.player-play', this.$container);
      this.$stopBtn = $('.player-stop', this.$container);
      this.$pauseBtn = $('.player-pause', this.$container);
      this.$prevBtn.click(function() {
        return _this.prev();
      });
      this.$nextBtn.click(function() {
        return _this.next();
      });
      this.$stopBtn.click(function() {
        return _this.stop();
      });
      this.$pauseBtn.click(function() {
        return _this.pause();
      });
      this.$playBtn.click(function() {
        if (_this.current === 'paused') {
          return _this.resume();
        } else {
          return _this.play();
        }
      });
      this.$progressContainer.click(function(event) {
        var progress;
        progress = event.clientX / _this.$progressContainer.width();
        return typeof _this.setprogressCallback === "function" ? _this.setprogressCallback(progress) : void 0;
      });
      this.$playlist.click(function(event) {
        var target;
        target = $(event.target);
        if (target.is('li')) {
          return _this.setTrack(target.text());
        }
      });
      this.$container.on('mousewheel', function(event) {
        return event.stopPropagation();
      });
      this.onresize();
      $(window).resize(this.onresize);
    }

    PlayerWidget.prototype.onresize = function() {
      return this.$playlistContainer.height(this.$container.innerHeight() - this.$controlsContainer.outerHeight(true) - this.$progressContainer.outerHeight(true)).nanoScroller();
    };

    PlayerWidget.prototype.show = function(callback) {
      return this.$container.animate({
        left: '0px'
      }, {
        duration: 1000,
        easing: 'easeInOutCubic',
        complete: callback
      });
    };

    PlayerWidget.prototype.setPlaylist = function(playlist) {
      var trackName, _i, _len;
      this.playlist = playlist;
      this.$playlist.html('');
      for (_i = 0, _len = playlist.length; _i < _len; _i++) {
        trackName = playlist[_i];
        this.$playlist.append($('<li>').text(trackName));
      }
      return this.$playlistContainer.nanoScroller();
    };

    PlayerWidget.prototype.on = function(eventName, callback) {
      return this["" + eventName + "Callback"] = callback;
    };

    PlayerWidget.prototype.onplay = function() {
      this.$playBtn.hide();
      this.$pauseBtn.show();
      return typeof this.playCallback === "function" ? this.playCallback() : void 0;
    };

    PlayerWidget.prototype.onpause = function() {
      this.$pauseBtn.hide();
      this.$playBtn.show();
      return typeof this.pauseCallback === "function" ? this.pauseCallback() : void 0;
    };

    PlayerWidget.prototype.onresume = function() {
      this.$playBtn.hide();
      this.$pauseBtn.show();
      return typeof this.resumeCallback === "function" ? this.resumeCallback() : void 0;
    };

    PlayerWidget.prototype.onstop = function() {
      this.$pauseBtn.hide();
      this.$playBtn.show();
      return typeof this.stopCallback === "function" ? this.stopCallback() : void 0;
    };

    PlayerWidget.prototype.onprev = function() {
      return typeof this.prevCallback === "function" ? this.prevCallback() : void 0;
    };

    PlayerWidget.prototype.onnext = function() {
      return typeof this.nextCallback === "function" ? this.nextCallback() : void 0;
    };

    PlayerWidget.prototype.onsettrack = function(trackName) {
      var _ref;
      this.stop();
      if ((_ref = this.$currentTrack) != null) {
        _ref.removeClass('player-current-track');
      }
      this.$currentTrack = this.$playlist.find("li").filter(function(i) {
        return $(this).text() === trackName;
      }).addClass('player-current-track');
      if (typeof this.settrackCallback === "function") {
        this.settrackCallback(trackName);
      }
      return window.location.hash = window.encodeURIComponent(trackName);
    };

    PlayerWidget.prototype.setTrack = PlayerWidget.prototype.onsettrack;

    PlayerWidget.prototype.getRandomTrack = function() {
      return this.playlist[Math.floor(Math.random() * this.playlist.length)];
    };

    PlayerWidget.prototype.displayProgress = function(event) {
      var curTime, current, progress, totTime, total;
      current = event.current, total = event.total;
      current = Math.min(current, total);
      progress = current / total;
      this.$progressBar.width(this.$progressContainer.width() * progress);
      curTime = this._formatTime(current);
      totTime = this._formatTime(total);
      return this.$progressText.text("" + curTime + " / " + totTime);
    };

    PlayerWidget.prototype._formatTime = function(time) {
      var minutes, seconds;
      minutes = time / 60 >> 0;
      seconds = String(time - (minutes * 60) >> 0);
      if (seconds.length === 1) {
        seconds = "0" + seconds;
      }
      return "" + minutes + ":" + seconds;
    };

    return PlayerWidget;

  })();

  StateMachine.create({
    target: PlayerWidget.prototype,
    events: [
      {
        name: 'init',
        from: 'none',
        to: 'ready'
      }, {
        name: 'play',
        from: 'ready',
        to: 'playing'
      }, {
        name: 'pause',
        from: 'playing',
        to: 'paused'
      }, {
        name: 'resume',
        from: 'paused',
        to: 'playing'
      }, {
        name: 'stop',
        from: '*',
        to: 'ready'
      }
    ]
  });

  this.PlayerWidget = PlayerWidget;

}).call(this);

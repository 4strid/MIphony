// Generated by CoffeeScript 1.3.1
(function() {
  var Euphony,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Euphony = (function() {

    Euphony.name = 'Euphony';

    function Euphony() {
      this.pause = __bind(this.pause, this);

      this.stop = __bind(this.stop, this);

      this.resume = __bind(this.resume, this);

      this.start = __bind(this.start, this);

      this.play = __bind(this.play, this);

      var _this = this;
      this.design = new PianoKeyboardDesign();
      this.keyboard = new PianoKeyboard(this.design);
      this.rain = new NoteRain(this.design);
      this.player = MIDI.Player;
      this.player.addListener(function(data) {
        var NOTE_OFF, NOTE_ON, message, note;
        NOTE_OFF = 128;
        NOTE_ON = 144;
        note = data.note, message = data.message;
        if (message === NOTE_ON) {
          return _this.keyboard.press(note);
        } else if (message === NOTE_OFF) {
          return _this.keyboard.release(note);
        }
      });
      this.player.setAnimation({
        delay: 20,
        callback: function(data) {
          if (_this.player.playing) {
            return _this.rain.update(data.now * 1000);
          }
        }
      });
    }

    Euphony.prototype.initScene = function() {
      var _this = this;
      this.scene = new Scene('#canvas');
      this.scene.add(this.keyboard.model);
      this.scene.add(this.rain.model);
      return this.scene.animate(function() {
        return _this.keyboard.update();
      });
    };

    Euphony.prototype.initMidi = function(callback) {
      return MIDI.loadPlugin(callback);
    };

    Euphony.prototype.getBuiltinMidiIndex = function(callback) {
      var _this = this;
      if (this.midiIndex) {
        return callback(this.midiIndex);
      }
      return $.getJSON('tracks/index.json', function(index) {
        _this.midiIndex = index;
        return callback(_this.midiIndex);
      });
    };

    Euphony.prototype.setBuiltinMidi = function(filename, callback) {
      var _this = this;
      if (localStorage[filename]) {
        return this.setMidiFile(localStorage[filename], callback);
      }
      return loader.start(function() {
        return setTimeout((function() {
          return DOMLoader.sendRequest({
            url: "tracks/" + filename,
            progress: function(event) {
              return loader.message('Loading MIDI File');
            },
            callback: function(response) {
              var midiData;
              loader.stop();
              midiData = response.responseText;
              _this.setMidiFile(response.responseText, callback);
              return localStorage[filename] = midiData;
            }
          });
        }), 0);
      });
    };

    Euphony.prototype.setMidiFile = function(midiFile, callback) {
      var _this = this;
      return this.player.loadFile(midiFile, function() {
        loader.stop();
        return _this.rain.setMidiData(_this.player.data, callback);
      });
    };

    Euphony.prototype.play = function() {
      if (this.started) {
        return this.resume();
      } else {
        return this.start();
      }
    };

    Euphony.prototype.start = function() {
      return this.player.start();
    };

    Euphony.prototype.resume = function() {
      console.log(123);
      return this.player.start();
    };

    Euphony.prototype.stop = function() {
      return this.player.stop();
    };

    Euphony.prototype.pause = function() {
      return this.player.pause();
    };

    return Euphony;

  })();

  this.Euphony = Euphony;

}).call(this);

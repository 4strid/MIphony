// Generated by CoffeeScript 1.3.1
(function() {
  var PianoKey, PianoKeyboard, PianoKeyboardDesign,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PianoKeyboardDesign = (function() {
    var KeyType;

    PianoKeyboardDesign.name = 'PianoKeyboardDesign';

    PianoKeyboardDesign.KeyType = KeyType = {
      WhiteC: 0,
      WhiteD: 1,
      WhiteE: 2,
      WhiteF: 3,
      WhiteG: 4,
      WhiteA: 5,
      WhiteB: 6,
      Black: 7
    };

    PianoKeyboardDesign.prototype.whiteKeyStep = 0.236;

    PianoKeyboardDesign.prototype.whiteKeyWidth = 0.226;

    PianoKeyboardDesign.prototype.whiteKeyHeight = 0.22;

    PianoKeyboardDesign.prototype.whiteKeyLength = 1.50;

    PianoKeyboardDesign.prototype.blackKeyWidth = 0.10;

    PianoKeyboardDesign.prototype.blackKeyHeight = 0.32;

    PianoKeyboardDesign.prototype.blackKeyLength = 1.00;

    PianoKeyboardDesign.prototype.blackKeyShiftCDE = 0.0216;

    PianoKeyboardDesign.prototype.blackKeyShiftFGAB = 0.0340;

    PianoKeyboardDesign.prototype.noteDropPosZ4WhiteKey = 0.25;

    PianoKeyboardDesign.prototype.noteDropPosZ4BlackKey = 0.75;

    PianoKeyboardDesign.prototype.keyDip = 0.15;

    PianoKeyboardDesign.prototype.keyUpSpeed = 0.03;

    PianoKeyboardDesign.prototype.keyInfo = [];

    function PianoKeyboardDesign() {
      var i, _i;
      for (i = _i = 0; _i < 128; i = ++_i) {
        this.keyInfo[i] = {};
      }
      this._initKeyType();
      this._initKeyPos();
    }

    PianoKeyboardDesign.prototype._initKeyType = function() {
      var Black, WhiteA, WhiteB, WhiteC, WhiteD, WhiteE, WhiteF, WhiteG, i, keyInfo, noteNo, _i;
      keyInfo = this.keyInfo;
      WhiteC = KeyType.WhiteC, WhiteD = KeyType.WhiteD, WhiteE = KeyType.WhiteE, WhiteF = KeyType.WhiteF, WhiteG = KeyType.WhiteG, WhiteA = KeyType.WhiteA, WhiteB = KeyType.WhiteB, Black = KeyType.Black;
      for (i = _i = 0; _i < 10; i = ++_i) {
        noteNo = i * 12;
        keyInfo[noteNo + 0].keyType = WhiteC;
        keyInfo[noteNo + 1].keyType = Black;
        keyInfo[noteNo + 2].keyType = WhiteD;
        keyInfo[noteNo + 3].keyType = Black;
        keyInfo[noteNo + 4].keyType = WhiteE;
        keyInfo[noteNo + 5].keyType = WhiteF;
        keyInfo[noteNo + 6].keyType = Black;
        keyInfo[noteNo + 7].keyType = WhiteG;
        keyInfo[noteNo + 8].keyType = Black;
        keyInfo[noteNo + 9].keyType = WhiteA;
        keyInfo[noteNo + 10].keyType = Black;
        keyInfo[noteNo + 11].keyType = WhiteB;
      }
      noteNo = 120;
      keyInfo[noteNo + 0].keyType = WhiteC;
      keyInfo[noteNo + 1].keyType = Black;
      keyInfo[noteNo + 2].keyType = WhiteD;
      keyInfo[noteNo + 3].keyType = Black;
      keyInfo[noteNo + 4].keyType = WhiteE;
      keyInfo[noteNo + 5].keyType = WhiteF;
      keyInfo[noteNo + 6].keyType = Black;
      return keyInfo[noteNo + 7].keyType = WhiteB;
    };

    PianoKeyboardDesign.prototype._initKeyPos = function() {
      var Black, WhiteA, WhiteB, WhiteC, WhiteD, WhiteE, WhiteF, WhiteG, blackKeyShiftCDE, blackKeyShiftFGAB, keyInfo, noteNo, posX, prevKeyType, shift, whiteKeyStep, _i, _j, _results;
      keyInfo = this.keyInfo, whiteKeyStep = this.whiteKeyStep, blackKeyShiftCDE = this.blackKeyShiftCDE, blackKeyShiftFGAB = this.blackKeyShiftFGAB;
      WhiteC = KeyType.WhiteC, WhiteD = KeyType.WhiteD, WhiteE = KeyType.WhiteE, WhiteF = KeyType.WhiteF, WhiteG = KeyType.WhiteG, WhiteA = KeyType.WhiteA, WhiteB = KeyType.WhiteB, Black = KeyType.Black;
      noteNo = 0;
      prevKeyType = WhiteB;
      posX = 0.0;
      shift = 0.0;
      keyInfo[noteNo].keyCenterPosX = posX;
      prevKeyType = keyInfo[noteNo].keyType;
      for (noteNo = _i = 1; _i < 128; noteNo = ++_i) {
        if (prevKeyType === Black) {
          if (keyInfo[noteNo].keyType === Black) {

          } else {
            posX += whiteKeyStep / 2.0;
          }
        } else {
          if (keyInfo[noteNo].keyType === Black) {
            posX += whiteKeyStep / 2.0;
          } else {
            posX += whiteKeyStep;
          }
        }
        keyInfo[noteNo].keyCenterPosX = posX;
        prevKeyType = keyInfo[noteNo].keyType;
      }
      prevKeyType = WhiteC;
      _results = [];
      for (noteNo = _j = 0; _j < 128; noteNo = ++_j) {
        if (keyInfo[noteNo].keyType === Black) {
          switch (prevKeyType) {
            case WhiteC:
              shift = -blackKeyShiftCDE;
              break;
            case WhiteD:
              shift = +blackKeyShiftCDE;
              break;
            case WhiteF:
              shift = -blackKeyShiftFGAB;
              break;
            case WhiteG:
              shift = 0.0;
              break;
            case WhiteA:
              shift = +blackKeyShiftFGAB;
              break;
            default:
              shift = 0.0;
          }
          if (noteNo === 126) {
            shift = 0.0;
          }
          keyInfo[noteNo].keyCenterPosX += shift;
        }
        _results.push(prevKeyType = keyInfo[noteNo].keyType);
      }
      return _results;
    };

    return PianoKeyboardDesign;

  })();

  PianoKey = (function() {

    PianoKey.name = 'PianoKey';

    function PianoKey(_arg) {
      var color, geometry, height, keyType, length, material, position, width;
      this.design = _arg.design, keyType = _arg.keyType, position = _arg.position;
      if (keyType === PianoKeyboardDesign.KeyType.Black) {
        width = this.design.blackKeyWidth;
        height = this.design.blackKeyHeight;
        length = this.design.blackKeyLength;
        color = 0x111111;
      } else {
        width = this.design.whiteKeyWidth;
        height = this.design.whiteKeyHeight;
        length = this.design.whiteKeyLength;
        color = 0xffffff;
      }
      geometry = new THREE.CubeGeometry(width, height, length);
      material = new THREE.MeshLambertMaterial({
        color: color,
        ambient: 0x888888
      });
      this.mesh = new THREE.Mesh(geometry, material);
      this.mesh.position.copy(position);
      this.originalY = position.y;
      this.pressedY = this.originalY - this.design.keyDip;
    }

    PianoKey.prototype.press = function() {
      return this.mesh.position.y = this.pressedY;
    };

    PianoKey.prototype.update = function() {
      var offset;
      if (this.mesh.position.y < this.originalY) {
        offset = this.originalY - this.mesh.position.y;
        return this.mesh.position.y += Math.min(offset, this.design.keyUpSpeed);
      }
    };

    return PianoKey;

  })();

  PianoKeyboard = (function() {

    PianoKeyboard.name = 'PianoKeyboard';

    function PianoKeyboard() {
      this.update = __bind(this.update, this);

      var Black, blackKeyY, blackKeyZ, design, key, keyCenterPosX, keyType, keys, model, pos, _i, _len, _ref, _ref1;
      design = new PianoKeyboardDesign;
      Black = PianoKeyboardDesign.KeyType.Black;
      model = new THREE.Object3D();
      keys = [];
      blackKeyY = (design.blackKeyHeight - design.whiteKeyHeight) / 2 + 0.001;
      blackKeyZ = (design.blackKeyLength - design.whiteKeyLength) / 2 + 0.001;
      _ref = design.keyInfo;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], keyType = _ref1.keyType, keyCenterPosX = _ref1.keyCenterPosX;
        if (keyType === Black) {
          pos = new THREE.Vector3(keyCenterPosX, blackKeyY, blackKeyZ);
        } else {
          pos = new THREE.Vector3(keyCenterPosX, 0, 0);
        }
        key = new PianoKey({
          design: design,
          keyType: keyType,
          position: pos
        });
        keys.push(key);
        model.add(key.mesh);
      }
      this.keys = keys;
      this.model = model;
    }

    PianoKeyboard.prototype.press = function(note) {
      return this.keys[note].press();
    };

    PianoKeyboard.prototype.update = function() {
      var key, _i, _len, _ref, _results;
      _ref = this.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(key.update());
      }
      return _results;
    };

    return PianoKeyboard;

  })();

  this.PianoKeyboard = PianoKeyboard;

}).call(this);

// Generated by CoffeeScript 1.3.1
(function() {
  var Euphony,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Euphony = (function() {

    Euphony.name = 'Euphony';

    function Euphony() {
      this.start = __bind(this.start, this);

      var _this = this;
      this.scene = new Scene('#container');
      this.design = new PianoKeyboardDesign();
      this.keyboard = new PianoKeyboard(this.design);
      this.scene.add(this.keyboard.model);
      this.rain = null;
      this.player = MIDI.Player;
      this.player.addListener(function(data) {
        var NOTE_OFF, NOTE_ON, message, note;
        NOTE_OFF = 128;
        NOTE_ON = 144;
        note = data.note, message = data.message;
        if (message === NOTE_ON) {
          return _this.keyboard.press(note);
        } else if (message === NOTE_OFF) {
          return _this.keyboard.release(note);
        }
      });
      this.player.setAnimation({
        delay: 30,
        callback: function(data) {
          return _this.rain.update(data.now * 1000);
        }
      });
      this.noteToColor = (function() {
        var map;
        map = MusicTheory.Synesthesia.map('August Aeppli (1940)');
        return function(note) {
          return parseInt(map[note - MIDI.pianoKeyOffset].hex, 16);
        };
      })();
    }

    Euphony.prototype.start = function() {
      var _this = this;
      this.scene.animate(function() {
        return _this.keyboard.update();
      });
      return MIDI.loadPlugin(function() {
        var trackNames;
        window.loader.stop();
        trackNames = Object.keys(MIDIFiles);
        return _this.player.loadFile(MIDIFiles[trackNames[12]], function(midifile) {
          if (_this.rain) {
            _this.scene.remove(_this.rain.model);
          }
          _this.rain = new NoteRain({
            midiData: _this.player.data,
            pianoDesign: _this.design,
            noteToColor: _this.noteToColor
          });
          _this.scene.add(_this.rain.model);
          return _this.player.start();
        });
      });
    };

    return Euphony;

  })();

  this.Euphony = Euphony;

}).call(this);

// Generated by CoffeeScript 1.3.1
(function() {
  var PlayerWidget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlayerWidget = (function() {

    PlayerWidget.name = 'PlayerWidget';

    function PlayerWidget() {
      this.onnext = __bind(this.onnext, this);

      this.onprev = __bind(this.onprev, this);

      this.onstop = __bind(this.onstop, this);

      this.onresume = __bind(this.onresume, this);

      this.onpause = __bind(this.onpause, this);

      this.onplay = __bind(this.onplay, this);

      this.oninit = __bind(this.oninit, this);

      var _this = this;
      this.container = $('#panel');
      this.prevBtn = $('#control-prev').click(function() {
        return _this.prev();
      });
      this.stopBtn = $('#control-stop').click(function() {
        return _this.stop();
      });
      this.nextBtn = $('#control-next').click(function() {
        return _this.next();
      });
      this.pauseBtn = $('#control-pause').click(function() {
        return _this.pause();
      });
      this.playBtn = $('#control-play').click(function() {
        if (_this.current === 'paused') {
          return _this.resume();
        } else {
          return _this.play();
        }
      });
    }

    PlayerWidget.prototype.oninit = function() {
      return this.container.animate({
        left: '0px'
      }, {
        duration: 1000,
        easing: 'easeInOutCubic'
      });
    };

    PlayerWidget.prototype.bind = function(eventName, callback) {
      return this["" + eventName + "Callback"] = callback;
    };

    PlayerWidget.prototype.onplay = function() {
      this.playBtn.hide();
      this.pauseBtn.show();
      return typeof this.playCallback === "function" ? this.playCallback() : void 0;
    };

    PlayerWidget.prototype.onpause = function() {
      this.pauseBtn.hide();
      this.playBtn.show();
      return typeof this.pauseCallback === "function" ? this.pauseCallback() : void 0;
    };

    PlayerWidget.prototype.onresume = function() {
      this.playBtn.hide();
      this.pauseBtn.show();
      return typeof this.resumeCallback === "function" ? this.resumeCallback() : void 0;
    };

    PlayerWidget.prototype.onstop = function() {
      this.pauseBtn.hide();
      this.playBtn.show();
      return typeof this.stopCallback === "function" ? this.stopCallback() : void 0;
    };

    PlayerWidget.prototype.onprev = function() {
      return typeof this.prevCallback === "function" ? this.prevCallback() : void 0;
    };

    PlayerWidget.prototype.onnext = function() {
      return typeof this.nextCallback === "function" ? this.nextCallback() : void 0;
    };

    return PlayerWidget;

  })();

  StateMachine.create({
    target: PlayerWidget.prototype,
    events: [
      {
        name: 'init',
        from: 'none',
        to: 'ready'
      }, {
        name: 'play',
        from: 'ready',
        to: 'playing'
      }, {
        name: 'pause',
        from: 'playing',
        to: 'paused'
      }, {
        name: 'resume',
        from: 'paused',
        to: 'playing'
      }, {
        name: 'stop',
        from: '*',
        to: 'ready'
      }
    ]
  });

  this.PlayerWidget = PlayerWidget;

}).call(this);

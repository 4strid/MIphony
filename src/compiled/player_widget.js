// Generated by CoffeeScript 1.3.1
(function() {
  var PlayerWidget,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  PlayerWidget = (function() {

    PlayerWidget.name = 'PlayerWidget';

    function PlayerWidget() {
      this.next = __bind(this.next, this);

      this.prev = __bind(this.prev, this);

      this.stop = __bind(this.stop, this);

      this.resume = __bind(this.resume, this);

      this.pause = __bind(this.pause, this);

      this.play = __bind(this.play, this);

      this.init = __bind(this.init, this);
      this.container = $('#player');
      this.prevBtn = $('#control-prev').click(this.prev);
      this.playBtn = $('#control-play').toggle(this.play, this.pause);
      this.stopBtn = $('#control-stop').click(this.stop);
      this.nextBtn = $('#control-next').click(this.next);
    }

    PlayerWidget.prototype.init = function() {
      return this.container.animate({
        left: '0px'
      }, {
        duration: 1000,
        easing: 'easeInOutCubic'
      });
    };

    PlayerWidget.prototype.bind = function(eventName, callback) {
      return this["on" + eventName] = callback;
    };

    PlayerWidget.prototype.play = function() {
      this.playBtn.removeClass('icon-play').addClass('icon-pause');
      return typeof this.onplay === "function" ? this.onplay() : void 0;
    };

    PlayerWidget.prototype.pause = function() {
      this.playBtn.removeClass('icon-pause').addClass('icon-play');
      return typeof this.onpause === "function" ? this.onpause() : void 0;
    };

    PlayerWidget.prototype.resume = function() {
      this.playBtn.removeClass('icon-play').addClass('icon-pause');
      return typeof this.onresume === "function" ? this.onresume() : void 0;
    };

    PlayerWidget.prototype.stop = function() {
      this.playBtn.removeClass('icon-pause').addClass('icon-play');
      return typeof this.onstop === "function" ? this.onstop() : void 0;
    };

    PlayerWidget.prototype.prev = function() {
      return typeof this.onprev === "function" ? this.onprev() : void 0;
    };

    PlayerWidget.prototype.next = function() {
      return typeof this.onnext === "function" ? this.onnext() : void 0;
    };

    return PlayerWidget;

  })();

  this.PlayerWidget = PlayerWidget;

}).call(this);
